import Typography from '@mui/material/Typography';
import type { NextPage } from 'next'
import Head from 'next/head'
import { useForm } from 'react-hook-form'
import AddStudentForm from '../components/AddStudentForm';

// Add a new student to the db using the API. It also usen react-hook-form to validate the form.
const Create: NextPage = () => {
  const { register, handleSubmit, formState: { errors }, control } = useForm();

  const onSubmit = async (data: any) => {
    const student = {
      nombre: data.nombre,
      curso: data.curso,
      email: data.email,
      calificaciones: {
        PrimerCuatr: data.PrimerCuatr,
        SegundoCuatr: data.SegundoCuatr
      },
      fechaNac: data.fechaNac
    }
    const res = await fetch('http://localhost:3000/api/create', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(student)
    })
    const response = await res.json()
    alert('Estudiante creado - ' + JSON.stringify(response))
  }

  const options = [
    { value: 'CTD', label: 'CTD' },
    { value: 'Data science', label: 'Data science' },
    { value: 'Programacion Web Full Stack', label: 'Programacion Web Full Stack' },
    { value: 'Data Analytics', label: 'Data Analytics' },
    { value: 'Maestria en Negocios Digitales', label: 'Maestria en Negocios Digitales' },
    { value: 'Licenciatura en Negocios Digitales', label: 'Licenciatura en Negocios Digitales' }
  ]

  // Input name props
  const nombreHelperText = errors.nombre?.type === 'required' ? 'Este campo es requerido' : '';
  const nombreError = Boolean(errors.nombre);

  // Input email props
  const emailHelperText = errors.email?.type === 'required' ? 'Este campo es requerido' : '';
  const emailError = Boolean(errors.email);

  // Input Primer Cuatrimestre props
  let primerCuatrHelperText = '';
  switch (errors.PrimerCuatr?.type) {
    case 'required':
      primerCuatrHelperText = 'Este campo es requerido';
      break;
    case 'min':
      primerCuatrHelperText = 'El valor minimo es 1';
      break;
    case 'max':
      primerCuatrHelperText = 'El valor maximo es 10';
      break;
    default:
      primerCuatrHelperText = '';
  }
  const primerCuatrError = Boolean(errors.PrimerCuatr);

  return (
    <>
      <Head>
        <title>Agregar nuevo estudiante</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Typography variant='h1' sx={{ marginBottom: 5 }}>Agregar nuevo estudiante</Typography>
      <AddStudentForm />
    </>
  )
}

export default Create
